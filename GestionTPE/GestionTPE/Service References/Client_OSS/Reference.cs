//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GestionTPE.Client_OSS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Client_OSS.IOnlineServerService")]
    public interface IOnlineServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetLoyaltyPoints", ReplyAction="http://tempuri.org/IOnlineServerService/GetLoyaltyPointsResponse")]
        string GetLoyaltyPoints(int pIdSite, int pIdTpe, string pCardLoyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetLoyaltyPoints", ReplyAction="http://tempuri.org/IOnlineServerService/GetLoyaltyPointsResponse")]
        System.Threading.Tasks.Task<string> GetLoyaltyPointsAsync(int pIdSite, int pIdTpe, string pCardLoyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetLoyaltyBarCodeStatus", ReplyAction="http://tempuri.org/IOnlineServerService/GetLoyaltyBarCodeStatusResponse")]
        string GetLoyaltyBarCodeStatus(int pIdSite, int pIdTpe, string pIdProduct, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetLoyaltyBarCodeStatus", ReplyAction="http://tempuri.org/IOnlineServerService/GetLoyaltyBarCodeStatusResponse")]
        System.Threading.Tasks.Task<string> GetLoyaltyBarCodeStatusAsync(int pIdSite, int pIdTpe, string pIdProduct, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/BurnLoyaltyBarCodeBarre", ReplyAction="http://tempuri.org/IOnlineServerService/BurnLoyaltyBarCodeBarreResponse")]
        string BurnLoyaltyBarCodeBarre(int pIdSite, int pIdTpe, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/BurnLoyaltyBarCodeBarre", ReplyAction="http://tempuri.org/IOnlineServerService/BurnLoyaltyBarCodeBarreResponse")]
        System.Threading.Tasks.Task<string> BurnLoyaltyBarCodeBarreAsync(int pIdSite, int pIdTpe, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/FreeLoyaltyBarCode", ReplyAction="http://tempuri.org/IOnlineServerService/FreeLoyaltyBarCodeResponse")]
        string FreeLoyaltyBarCode(int pIdSite, int pIdTpe, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/FreeLoyaltyBarCode", ReplyAction="http://tempuri.org/IOnlineServerService/FreeLoyaltyBarCodeResponse")]
        System.Threading.Tasks.Task<string> FreeLoyaltyBarCodeAsync(int pIdSite, int pIdTpe, string pBarCodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/HasPendingOperation", ReplyAction="http://tempuri.org/IOnlineServerService/HasPendingOperationResponse")]
        string HasPendingOperation(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/HasPendingOperation", ReplyAction="http://tempuri.org/IOnlineServerService/HasPendingOperationResponse")]
        System.Threading.Tasks.Task<string> HasPendingOperationAsync(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetCardParameter", ReplyAction="http://tempuri.org/IOnlineServerService/GetCardParameterResponse")]
        string GetCardParameter(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetCardParameter", ReplyAction="http://tempuri.org/IOnlineServerService/GetCardParameterResponse")]
        System.Threading.Tasks.Task<string> GetCardParameterAsync(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckCardParameterApplied", ReplyAction="http://tempuri.org/IOnlineServerService/AckCardParameterAppliedResponse")]
        string AckCardParameterApplied(int pIdSite, int pIdTpe, string pCardNum, string pParameterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckCardParameterApplied", ReplyAction="http://tempuri.org/IOnlineServerService/AckCardParameterAppliedResponse")]
        System.Threading.Tasks.Task<string> AckCardParameterAppliedAsync(int pIdSite, int pIdTpe, string pCardNum, string pParameterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckCardParameter", ReplyAction="http://tempuri.org/IOnlineServerService/AckCardParameterResponse")]
        string AckCardParameter(int pIdSite, int pIdTpe, string pCardNum, string pParameterId, string pStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckCardParameter", ReplyAction="http://tempuri.org/IOnlineServerService/AckCardParameterResponse")]
        System.Threading.Tasks.Task<string> AckCardParameterAsync(int pIdSite, int pIdTpe, string pCardNum, string pParameterId, string pStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckDownloadingCredits", ReplyAction="http://tempuri.org/IOnlineServerService/AckDownloadingCreditsResponse")]
        void AckDownloadingCredits(int pIdSite, int pIdTpe, string pCardNum, string pLstOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/AckDownloadingCredits", ReplyAction="http://tempuri.org/IOnlineServerService/AckDownloadingCreditsResponse")]
        System.Threading.Tasks.Task AckDownloadingCreditsAsync(int pIdSite, int pIdTpe, string pCardNum, string pLstOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/InitConn", ReplyAction="http://tempuri.org/IOnlineServerService/InitConnResponse")]
        System.Nullable<uint> InitConn(int pIdSite, int pIdTpe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/InitConn", ReplyAction="http://tempuri.org/IOnlineServerService/InitConnResponse")]
        System.Threading.Tasks.Task<System.Nullable<uint>> InitConnAsync(int pIdSite, int pIdTpe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/Disconnect", ReplyAction="http://tempuri.org/IOnlineServerService/DisconnectResponse")]
        void Disconnect(int pIdSite, int pIdTpe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/Disconnect", ReplyAction="http://tempuri.org/IOnlineServerService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int pIdSite, int pIdTpe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetBlackListCode", ReplyAction="http://tempuri.org/IOnlineServerService/GetBlackListCodeResponse")]
        string GetBlackListCode(int pIdSite, int pIdTpe, string pCardType, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetBlackListCode", ReplyAction="http://tempuri.org/IOnlineServerService/GetBlackListCodeResponse")]
        System.Threading.Tasks.Task<string> GetBlackListCodeAsync(int pIdSite, int pIdTpe, string pCardType, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetDownloadingCredits", ReplyAction="http://tempuri.org/IOnlineServerService/GetDownloadingCreditsResponse")]
        string GetDownloadingCredits(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/GetDownloadingCredits", ReplyAction="http://tempuri.org/IOnlineServerService/GetDownloadingCreditsResponse")]
        System.Threading.Tasks.Task<string> GetDownloadingCreditsAsync(int pIdSite, int pIdTpe, string pCardNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/IsManCodeValid", ReplyAction="http://tempuri.org/IOnlineServerService/IsManCodeValidResponse")]
        string IsManCodeValid(int pIdSite, int pIdTpe, string pCustNum, string pManCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/IsManCodeValid", ReplyAction="http://tempuri.org/IOnlineServerService/IsManCodeValidResponse")]
        System.Threading.Tasks.Task<string> IsManCodeValidAsync(int pIdSite, int pIdTpe, string pCustNum, string pManCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/CanTransfer", ReplyAction="http://tempuri.org/IOnlineServerService/CanTransferResponse")]
        string CanTransfer(int pIdSite, int pIdTpe, string pSourceCardNum, string pDestCardNum, string pAmount, string pTransacNr, string pManCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/CanTransfer", ReplyAction="http://tempuri.org/IOnlineServerService/CanTransferResponse")]
        System.Threading.Tasks.Task<string> CanTransferAsync(int pIdSite, int pIdTpe, string pSourceCardNum, string pDestCardNum, string pAmount, string pTransacNr, string pManCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/Transfer", ReplyAction="http://tempuri.org/IOnlineServerService/TransferResponse")]
        string Transfer(int pIdSite, int pIdTpe, string pIdPreOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/Transfer", ReplyAction="http://tempuri.org/IOnlineServerService/TransferResponse")]
        System.Threading.Tasks.Task<string> TransferAsync(int pIdSite, int pIdTpe, string pIdPreOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/CanCancelTransfer", ReplyAction="http://tempuri.org/IOnlineServerService/CanCancelTransferResponse")]
        string CanCancelTransfer(int pIdSite, int pIdTpe, string pTransacNr, string pTransacNrToCancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/CanCancelTransfer", ReplyAction="http://tempuri.org/IOnlineServerService/CanCancelTransferResponse")]
        System.Threading.Tasks.Task<string> CanCancelTransferAsync(int pIdSite, int pIdTpe, string pTransacNr, string pTransacNrToCancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/SendDump", ReplyAction="http://tempuri.org/IOnlineServerService/SendDumpResponse")]
        string SendDump(int pIdSite, int pIdTpe, string pData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOnlineServerService/SendDump", ReplyAction="http://tempuri.org/IOnlineServerService/SendDumpResponse")]
        System.Threading.Tasks.Task<string> SendDumpAsync(int pIdSite, int pIdTpe, string pData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOnlineServerServiceChannel : GestionTPE.Client_OSS.IOnlineServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OnlineServerServiceClient : System.ServiceModel.ClientBase<GestionTPE.Client_OSS.IOnlineServerService>, GestionTPE.Client_OSS.IOnlineServerService {
        
        public OnlineServerServiceClient() {
        }
        
        public OnlineServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OnlineServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OnlineServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetLoyaltyPoints(int pIdSite, int pIdTpe, string pCardLoyId) {
            return base.Channel.GetLoyaltyPoints(pIdSite, pIdTpe, pCardLoyId);
        }
        
        public System.Threading.Tasks.Task<string> GetLoyaltyPointsAsync(int pIdSite, int pIdTpe, string pCardLoyId) {
            return base.Channel.GetLoyaltyPointsAsync(pIdSite, pIdTpe, pCardLoyId);
        }
        
        public string GetLoyaltyBarCodeStatus(int pIdSite, int pIdTpe, string pIdProduct, string pBarCodeId) {
            return base.Channel.GetLoyaltyBarCodeStatus(pIdSite, pIdTpe, pIdProduct, pBarCodeId);
        }
        
        public System.Threading.Tasks.Task<string> GetLoyaltyBarCodeStatusAsync(int pIdSite, int pIdTpe, string pIdProduct, string pBarCodeId) {
            return base.Channel.GetLoyaltyBarCodeStatusAsync(pIdSite, pIdTpe, pIdProduct, pBarCodeId);
        }
        
        public string BurnLoyaltyBarCodeBarre(int pIdSite, int pIdTpe, string pBarCodeId) {
            return base.Channel.BurnLoyaltyBarCodeBarre(pIdSite, pIdTpe, pBarCodeId);
        }
        
        public System.Threading.Tasks.Task<string> BurnLoyaltyBarCodeBarreAsync(int pIdSite, int pIdTpe, string pBarCodeId) {
            return base.Channel.BurnLoyaltyBarCodeBarreAsync(pIdSite, pIdTpe, pBarCodeId);
        }
        
        public string FreeLoyaltyBarCode(int pIdSite, int pIdTpe, string pBarCodeId) {
            return base.Channel.FreeLoyaltyBarCode(pIdSite, pIdTpe, pBarCodeId);
        }
        
        public System.Threading.Tasks.Task<string> FreeLoyaltyBarCodeAsync(int pIdSite, int pIdTpe, string pBarCodeId) {
            return base.Channel.FreeLoyaltyBarCodeAsync(pIdSite, pIdTpe, pBarCodeId);
        }
        
        public string HasPendingOperation(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.HasPendingOperation(pIdSite, pIdTpe, pCardNum);
        }
        
        public System.Threading.Tasks.Task<string> HasPendingOperationAsync(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.HasPendingOperationAsync(pIdSite, pIdTpe, pCardNum);
        }
        
        public string GetCardParameter(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.GetCardParameter(pIdSite, pIdTpe, pCardNum);
        }
        
        public System.Threading.Tasks.Task<string> GetCardParameterAsync(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.GetCardParameterAsync(pIdSite, pIdTpe, pCardNum);
        }
        
        public string AckCardParameterApplied(int pIdSite, int pIdTpe, string pCardNum, string pParameterId) {
            return base.Channel.AckCardParameterApplied(pIdSite, pIdTpe, pCardNum, pParameterId);
        }
        
        public System.Threading.Tasks.Task<string> AckCardParameterAppliedAsync(int pIdSite, int pIdTpe, string pCardNum, string pParameterId) {
            return base.Channel.AckCardParameterAppliedAsync(pIdSite, pIdTpe, pCardNum, pParameterId);
        }
        
        public string AckCardParameter(int pIdSite, int pIdTpe, string pCardNum, string pParameterId, string pStatus) {
            return base.Channel.AckCardParameter(pIdSite, pIdTpe, pCardNum, pParameterId, pStatus);
        }
        
        public System.Threading.Tasks.Task<string> AckCardParameterAsync(int pIdSite, int pIdTpe, string pCardNum, string pParameterId, string pStatus) {
            return base.Channel.AckCardParameterAsync(pIdSite, pIdTpe, pCardNum, pParameterId, pStatus);
        }
        
        public void AckDownloadingCredits(int pIdSite, int pIdTpe, string pCardNum, string pLstOrder) {
            base.Channel.AckDownloadingCredits(pIdSite, pIdTpe, pCardNum, pLstOrder);
        }
        
        public System.Threading.Tasks.Task AckDownloadingCreditsAsync(int pIdSite, int pIdTpe, string pCardNum, string pLstOrder) {
            return base.Channel.AckDownloadingCreditsAsync(pIdSite, pIdTpe, pCardNum, pLstOrder);
        }
        
        public System.Nullable<uint> InitConn(int pIdSite, int pIdTpe) {
            return base.Channel.InitConn(pIdSite, pIdTpe);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<uint>> InitConnAsync(int pIdSite, int pIdTpe) {
            return base.Channel.InitConnAsync(pIdSite, pIdTpe);
        }
        
        public void Disconnect(int pIdSite, int pIdTpe) {
            base.Channel.Disconnect(pIdSite, pIdTpe);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int pIdSite, int pIdTpe) {
            return base.Channel.DisconnectAsync(pIdSite, pIdTpe);
        }
        
        public string GetBlackListCode(int pIdSite, int pIdTpe, string pCardType, string pCardNum) {
            return base.Channel.GetBlackListCode(pIdSite, pIdTpe, pCardType, pCardNum);
        }
        
        public System.Threading.Tasks.Task<string> GetBlackListCodeAsync(int pIdSite, int pIdTpe, string pCardType, string pCardNum) {
            return base.Channel.GetBlackListCodeAsync(pIdSite, pIdTpe, pCardType, pCardNum);
        }
        
        public string GetDownloadingCredits(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.GetDownloadingCredits(pIdSite, pIdTpe, pCardNum);
        }
        
        public System.Threading.Tasks.Task<string> GetDownloadingCreditsAsync(int pIdSite, int pIdTpe, string pCardNum) {
            return base.Channel.GetDownloadingCreditsAsync(pIdSite, pIdTpe, pCardNum);
        }
        
        public string IsManCodeValid(int pIdSite, int pIdTpe, string pCustNum, string pManCode) {
            return base.Channel.IsManCodeValid(pIdSite, pIdTpe, pCustNum, pManCode);
        }
        
        public System.Threading.Tasks.Task<string> IsManCodeValidAsync(int pIdSite, int pIdTpe, string pCustNum, string pManCode) {
            return base.Channel.IsManCodeValidAsync(pIdSite, pIdTpe, pCustNum, pManCode);
        }
        
        public string CanTransfer(int pIdSite, int pIdTpe, string pSourceCardNum, string pDestCardNum, string pAmount, string pTransacNr, string pManCode) {
            return base.Channel.CanTransfer(pIdSite, pIdTpe, pSourceCardNum, pDestCardNum, pAmount, pTransacNr, pManCode);
        }
        
        public System.Threading.Tasks.Task<string> CanTransferAsync(int pIdSite, int pIdTpe, string pSourceCardNum, string pDestCardNum, string pAmount, string pTransacNr, string pManCode) {
            return base.Channel.CanTransferAsync(pIdSite, pIdTpe, pSourceCardNum, pDestCardNum, pAmount, pTransacNr, pManCode);
        }
        
        public string Transfer(int pIdSite, int pIdTpe, string pIdPreOrder) {
            return base.Channel.Transfer(pIdSite, pIdTpe, pIdPreOrder);
        }
        
        public System.Threading.Tasks.Task<string> TransferAsync(int pIdSite, int pIdTpe, string pIdPreOrder) {
            return base.Channel.TransferAsync(pIdSite, pIdTpe, pIdPreOrder);
        }
        
        public string CanCancelTransfer(int pIdSite, int pIdTpe, string pTransacNr, string pTransacNrToCancel) {
            return base.Channel.CanCancelTransfer(pIdSite, pIdTpe, pTransacNr, pTransacNrToCancel);
        }
        
        public System.Threading.Tasks.Task<string> CanCancelTransferAsync(int pIdSite, int pIdTpe, string pTransacNr, string pTransacNrToCancel) {
            return base.Channel.CanCancelTransferAsync(pIdSite, pIdTpe, pTransacNr, pTransacNrToCancel);
        }
        
        public string SendDump(int pIdSite, int pIdTpe, string pData) {
            return base.Channel.SendDump(pIdSite, pIdTpe, pData);
        }
        
        public System.Threading.Tasks.Task<string> SendDumpAsync(int pIdSite, int pIdTpe, string pData) {
            return base.Channel.SendDumpAsync(pIdSite, pIdTpe, pData);
        }
    }
}
